{"version":3,"file":"token-lists.esm.js","sources":["../src/versionComparator.ts","../src/isVersionUpdate.ts","../src/getVersionUpgrade.ts","../src/diffTokenLists.ts","../src/minVersionBump.ts","../src/nextVersion.ts"],"sourcesContent":["import { Version } from './types';\n\n/**\n * Comparator function that allows sorting version from lowest to highest\n * @param versionA version A to compare\n * @param versionB version B to compare\n * @returns -1 if versionA comes before versionB, 0 if versionA is equal to version B, and 1 if version A comes after version B\n */\nexport function versionComparator(\n  versionA: Version,\n  versionB: Version\n): -1 | 0 | 1 {\n  if (versionA.major < versionB.major) {\n    return -1;\n  } else if (versionA.major > versionB.major) {\n    return 1;\n  } else if (versionA.minor < versionB.minor) {\n    return -1;\n  } else if (versionA.minor > versionB.minor) {\n    return 1;\n  } else if (versionA.patch < versionB.patch) {\n    return -1;\n  } else if (versionA.patch > versionB.patch) {\n    return 1;\n  } else {\n    return 0;\n  }\n}\n","import { versionComparator } from './versionComparator';\nimport { Version } from './types';\n\n/**\n * Returns true if versionB is an update over versionA\n */\nexport function isVersionUpdate(base: Version, update: Version): boolean {\n  return versionComparator(base, update) < 0;\n}\n","/**\n * Enum describing types of version differences\n */\nimport { Version } from './types';\n\nexport enum VersionUpgrade {\n  NONE,\n  PATCH,\n  MINOR,\n  MAJOR,\n}\n\n/**\n * Return the upgrade type from the base version to the update version.\n * Note that downgrades and equivalent versions are both treated as `NONE`.\n * @param base base list\n * @param update update to the list\n */\nexport function getVersionUpgrade(\n  base: Version,\n  update: Version\n): VersionUpgrade {\n  if (update.major > base.major) {\n    return VersionUpgrade.MAJOR;\n  }\n  if (update.major < base.major) {\n    return VersionUpgrade.NONE;\n  }\n  if (update.minor > base.minor) {\n    return VersionUpgrade.MINOR;\n  }\n  if (update.minor < base.minor) {\n    return VersionUpgrade.NONE;\n  }\n  return update.patch > base.patch ? VersionUpgrade.PATCH : VersionUpgrade.NONE;\n}\n","import { TokenInfo } from './types';\n\nexport type TokenInfoChangeKey = Exclude<\n  keyof TokenInfo,\n  'address' | 'chainId'\n>;\nexport type TokenInfoChanges = Array<TokenInfoChangeKey>;\n\n/**\n * compares two token info key values\n * this subset of full deep equal functionality does not work on objects or object arrays\n * @param a comparison item a\n * @param b comparison item b\n */\nfunction compareTokenInfoProperty(a: unknown, b: unknown): boolean {\n  if (a === b) return true;\n  if (typeof a !== typeof b) return false;\n  if (Array.isArray(a) && Array.isArray(b)) {\n    return a.every((el, i) => b[i] === el);\n  }\n  return false;\n}\n\n/**\n * Differences between a base list and an updated list.\n */\nexport interface TokenListDiff {\n  /**\n   * Tokens from updated with chainId/address not present in base list\n   */\n  readonly added: TokenInfo[];\n  /**\n   * Tokens from base with chainId/address not present in the updated list\n   */\n  readonly removed: TokenInfo[];\n  /**\n   * The token info that changed\n   */\n  readonly changed: {\n    [chainId: number]: {\n      [address: string]: TokenInfoChanges;\n    };\n  };\n}\n\n/**\n * Computes the diff of a token list where the first argument is the base and the second argument is the updated list.\n * @param base base list\n * @param update updated list\n */\nexport function diffTokenLists(\n  base: TokenInfo[],\n  update: TokenInfo[]\n): TokenListDiff {\n  const indexedBase = base.reduce<{\n    [chainId: number]: { [address: string]: TokenInfo };\n  }>((memo, tokenInfo) => {\n    if (!memo[tokenInfo.chainId]) memo[tokenInfo.chainId] = {};\n    memo[tokenInfo.chainId][tokenInfo.address] = tokenInfo;\n    return memo;\n  }, {});\n\n  const newListUpdates = update.reduce<{\n    added: TokenInfo[];\n    changed: {\n      [chainId: number]: {\n        [address: string]: TokenInfoChanges;\n      };\n    };\n    index: {\n      [chainId: number]: {\n        [address: string]: true;\n      };\n    };\n  }>(\n    (memo, tokenInfo) => {\n      const baseToken = indexedBase[tokenInfo.chainId]?.[tokenInfo.address];\n      if (!baseToken) {\n        memo.added.push(tokenInfo);\n      } else {\n        const changes: TokenInfoChanges = Object.keys(tokenInfo)\n          .filter(\n            (s): s is TokenInfoChangeKey => s !== 'address' && s !== 'chainId'\n          )\n          .filter(s => {\n            return !compareTokenInfoProperty(tokenInfo[s], baseToken[s]);\n          });\n        if (changes.length > 0) {\n          if (!memo.changed[tokenInfo.chainId]) {\n            memo.changed[tokenInfo.chainId] = {};\n          }\n          memo.changed[tokenInfo.chainId][tokenInfo.address] = changes;\n        }\n      }\n\n      if (!memo.index[tokenInfo.chainId]) {\n        memo.index[tokenInfo.chainId] = {\n          [tokenInfo.address]: true,\n        };\n      } else {\n        memo.index[tokenInfo.chainId][tokenInfo.address] = true;\n      }\n\n      return memo;\n    },\n    { added: [], changed: {}, index: {} }\n  );\n\n  const removed = base.reduce<TokenInfo[]>((list, curr) => {\n    if (\n      !newListUpdates.index[curr.chainId] ||\n      !newListUpdates.index[curr.chainId][curr.address]\n    ) {\n      list.push(curr);\n    }\n    return list;\n  }, []);\n\n  return {\n    added: newListUpdates.added,\n    changed: newListUpdates.changed,\n    removed,\n  };\n}\n","import { diffTokenLists } from './diffTokenLists';\nimport { VersionUpgrade } from './getVersionUpgrade';\nimport { TokenInfo } from './types';\n\n/**\n * Returns the minimum version bump for the given list\n * @param baseList the base list of tokens\n * @param updatedList the updated list of tokens\n */\nexport function minVersionBump(\n  baseList: TokenInfo[],\n  updatedList: TokenInfo[]\n): VersionUpgrade {\n  const diff = diffTokenLists(baseList, updatedList);\n  if (diff.removed.length > 0) return VersionUpgrade.MAJOR;\n  if (diff.added.length > 0) return VersionUpgrade.MINOR;\n  if (Object.keys(diff.changed).length > 0) return VersionUpgrade.PATCH;\n  return VersionUpgrade.NONE;\n}\n","import { VersionUpgrade } from './getVersionUpgrade';\nimport { Version } from './types';\n\n/**\n * Returns the next version of the list given a base version and the upgrade type\n * @param base current version\n * @param bump the upgrade type\n */\nexport function nextVersion(base: Version, bump: VersionUpgrade): Version {\n  switch (bump) {\n    case VersionUpgrade.NONE:\n      return base;\n\n    case VersionUpgrade.MAJOR:\n      return { major: base.major + 1, minor: 0, patch: 0 };\n\n    case VersionUpgrade.MINOR:\n      return {\n        major: base.major,\n        minor: base.minor + 1,\n        patch: 0,\n      };\n\n    case VersionUpgrade.PATCH:\n      return {\n        major: base.major,\n        minor: base.minor,\n        patch: base.patch + 1,\n      };\n  }\n}\n"],"names":["versionComparator","versionA","versionB","major","minor","patch","isVersionUpdate","base","update","VersionUpgrade","getVersionUpgrade","MAJOR","NONE","MINOR","PATCH","compareTokenInfoProperty","a","b","Array","isArray","every","el","i","diffTokenLists","indexedBase","reduce","memo","tokenInfo","chainId","address","newListUpdates","baseToken","_indexedBase$tokenInf","added","push","changes","Object","keys","filter","s","length","changed","index","_memo$index$tokenInfo","removed","list","curr","minVersionBump","baseList","updatedList","diff","nextVersion","bump"],"mappings":"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"}